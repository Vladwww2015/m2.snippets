<?php

namespace Brander\BenefitsBlock\Block\Adminhtml;

use Magento\Config\Block\System\Config\Form\Field;
use Brander\BenefitsBlock\Block\Adminhtml\Helper\Form\Gallery;
use Magento\Catalog\Block\Adminhtml\Product\Helper\Form\Gallery\Content;

class ImagesGallery extends Field
{
    /**
     * @var string
     */
    protected $_template = 'Magento_MediaStorage::system/config/system/storage/media/synchronize.phtml';

    /**
     * @var \Magento\MediaStorage\Model\File\Storage
     */
    protected $_fileStorage;
    protected $_html = '';

    /**
     * @param \Magento\Backend\Block\Template\Context $context
     * @param \Magento\MediaStorage\Model\File\Storage $fileStorage
     * @param array $data
     */
    public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        \Magento\MediaStorage\Model\File\Storage $fileStorage,
        array $data = []
    ) {
        $this->_fileStorage = $fileStorage;
        parent::__construct($context, $data);
    }

    public function _prepareLayout()
    {
        $arguments = [
            'config' => [
                    'label' => 'Images',
                    'collapsible' => false,
                    'opened' => true,
                    'canShow' => true,
                    'componentType' => 'fieldset'
                ]
        ];
        $gallery = $this->_layout->createBlock(Gallery::class, 'gallery', $arguments);
        $arguments = [
            'config' => [
                'parentComponent' => 'product_form.product_form.block_gallery.block_gallery'
                ]
        ];
        $content = $this->_layout->createBlock(Content::class, 'content.gallery', $arguments);
        $this->_layout->setChild('content', 'gallery', 'gallery');
        $this->_layout->setChild('gallery', 'content.gallery', 'content');
        $gallery = $this->_layout->getBlock('gallery');
        $this->_html = $gallery->toHtml();

        return parent::_prepareLayout(); // TODO: Change the autogenerated stub
    }


    /**
     * Return element html
     *
     * @param  \Magento\Framework\Data\Form\Element\AbstractElement $element
     * @return string
     *
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    protected function _getElementHtml(\Magento\Framework\Data\Form\Element\AbstractElement $element)
    {
        return $this->_html;
    }

    /**
     * Return ajax url for synchronize button
     *
     * @return string
     */
    public function getAjaxSyncUrl()
    {
        return $this->getUrl('*/system_config_system_storage/synchronize');
    }

    /**
     * Return ajax url for synchronize button
     *
     * @return string
     */
    public function getAjaxStatusUpdateUrl()
    {
        return $this->getUrl('*/system_config_system_storage/status');
    }

    /**
     * Generate synchronize button html
     *
     * @return string
     */
    public function getButtonHtml()
    {
        $button = $this->getLayout()->createBlock(
            'Magento\Backend\Block\Widget\Button'
        )->setData(
            [
                'id' => 'synchronize_button',
                'label' => __('Synchronize'),
            ]
        );

        return $button->toHtml();
    }

    /**
     * Retrieve last sync params settings
     *
     * Return array format:
     * array (
     *  => storage_type     int,
     *  => connection_name  string
     * )
     *
     * @return array
     */
    public function getSyncStorageParams()
    {
        $flag = $this->_fileStorage->getSyncFlag();
        $flagData = $flag->getFlagData();

        if ($flag->getState() == \Magento\MediaStorage\Model\File\Storage\Flag::STATE_NOTIFIED && is_array(
                $flagData
            ) && isset(
                $flagData['destination_storage_type']
            ) && $flagData['destination_storage_type'] != '' && isset(
                $flagData['destination_connection_name']
            )
        ) {
            $storageType = $flagData['destination_storage_type'];
            $connectionName = $flagData['destination_connection_name'];
        } else {
            $storageType = \Magento\MediaStorage\Model\File\Storage::STORAGE_MEDIA_FILE_SYSTEM;
            $connectionName = '';
        }

        return ['storage_type' => $storageType, 'connection_name' => $connectionName];
    }
}